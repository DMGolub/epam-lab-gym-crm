plugins {
    id 'java'
    id 'org.springframework.boot' version "$springBootVersion"
    id 'io.spring.dependency-management' version "$springDependencyManagementVersion"
}

group = 'com.epam.dmgolub.gym'
version = '0.0.1-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation project(path: ':gym-backend-trainer-workload')
    implementation project(path: ':gym-backend-main')

    // Tests
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    // Cucumber
    implementation "io.cucumber:cucumber-core:$cucumberVersion"
    implementation "io.cucumber:cucumber-java:$cucumberVersion"
    testImplementation "io.cucumber:cucumber-junit:$cucumberVersion"
    implementation "io.cucumber:cucumber-spring:$cucumberVersion"

    // Testcontainers
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation "org.testcontainers:junit-jupiter:$testcontainersVersion"
    testImplementation "org.testcontainers:postgresql:$testcontainersVersion"
    testImplementation "org.testcontainers:activemq:$testcontainersVersion"
    testImplementation "org.testcontainers:mongodb:$testcontainersVersion"

    // Awaitility
    testImplementation "org.awaitility:awaitility:$awaitilityVersion"
}

sourceSets {
    integrationTest {
        java.srcDir ("src/integrationTest/java")
        resources.srcDir ("src/integrationTest/resources")
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom runtimeOnly
}

processIntegrationTestResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.register('integrationTest', Test) {
    description = 'Runs integration tests'
    outputs.upToDateWhen { false }
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    shouldRunAfter test
    systemProperty 'cucumber.filter.tags', project.findProperty('cucumberTags') ?: ''
}

bootJar {
    enabled = false
}
